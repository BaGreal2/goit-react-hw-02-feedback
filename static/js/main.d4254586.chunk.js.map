{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["Section","props","title","children","Statistics","good","bad","neutral","total","positivePercentage","FeedbackOptions","handleAddVote","e","onLeaveFeedback","target","getAttribute","options","this","map","option","type","name","onClick","toUpperCase","split","splice","length","join","Component","App","value","setState","prevState","countTotalFeedback","state","countPositiveFeedbackPercentage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAkBeA,MAff,SAAiBC,GAAQ,IACfC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACf,OACE,oCACE,4BAAKD,GACJC,ICeQC,MApBf,SAAoBH,GAAQ,IAClBI,EAAkDJ,EAAlDI,KAAMC,EAA4CL,EAA5CK,IAAKC,EAAuCN,EAAvCM,QAASC,EAA8BP,EAA9BO,MAAOC,EAAuBR,EAAvBQ,mBACnC,OACE,oCACE,oCAAUJ,GACV,uCAAaE,GACb,mCAASD,GACT,qCAAWE,GACVF,EAAM,GAAK,iDAAuBG,EAAvB,OCRGC,E,4MACnBC,cAAgB,SAAAC,GACd,EAAKX,MAAMY,gBAAgBD,EAAEE,OAAOC,aAAa,U,uDAGzC,IAAD,OACCC,EAAYC,KAAKhB,MAAjBe,QACR,OACE,oCACGA,EAAQE,KAAI,SAAAC,GAAM,OACjB,4BAAQC,KAAK,SAASC,KAAMF,EAAQG,QAAS,EAAKX,eAC/CQ,EAAO,GAAGI,cACTJ,EACGK,MAAM,IACNC,OAAO,EAAGN,EAAOO,OAAS,GAC1BC,KAAK,a,GAfuBC,aCExBC,E,kDACnB,aAAe,IAAD,8BACZ,gBAQFhB,gBAAkB,SAAAiB,GAChB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAQE,EAAUF,GAAS,OAXlB,EAedG,mBAAqB,WACnB,OAAO,EAAKC,MAAM7B,KAAO,EAAK6B,MAAM5B,IAAM,EAAK4B,MAAM3B,SAhBzC,EAmBd4B,gCAAkC,WAChC,OACG,EAAKD,MAAM7B,MACT,EAAK6B,MAAM7B,KAAO,EAAK6B,MAAM5B,IAAM,EAAK4B,MAAM3B,SACjD,KArBF,EAAK2B,MAAQ,CACX7B,KAAM,EACNE,QAAS,EACTD,IAAK,GALK,E,qDA2BJ,IAAD,EACwBW,KAAKiB,MAA5B7B,EADD,EACCA,KAAMC,EADP,EACOA,IAAKC,EADZ,EACYA,QACnB,OACE,oCACE,kBAAC,EAAD,CAASL,MAAM,yBACb,kBAAC,EAAD,CACEc,QAAS,CAAC,OAAQ,UAAW,OAC7BH,gBAAiBI,KAAKJ,mBAG1B,kBAAC,EAAD,CAASX,MAAM,cACZI,EAAM,GAAKD,EAAO,GAAKE,EAAU,EAChC,kBAAC,EAAD,CACEF,KAAMA,EACNC,IAAKA,EACLC,QAASA,EACTC,MAAOS,KAAKgB,qBACZxB,mBAAoBQ,KAAKkB,oCAG3B,gD,GAhDqBP,aCOlBQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d4254586.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Section(props) {\n  const { title, children } = props;\n  return (\n    <>\n      <h2>{title}</h2>\n      {children}\n    </>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Statistics(props) {\n  const { good, bad, neutral, total, positivePercentage } = props;\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      {bad > 0 && <p>Positive Feedback: {positivePercentage}%</p>}\n    </>\n  );\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\nexport default Statistics;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class FeedbackOptions extends Component {\n  handleAddVote = e => {\n    this.props.onLeaveFeedback(e.target.getAttribute('name'));\n  };\n\n  render() {\n    const { options } = this.props;\n    return (\n      <>\n        {options.map(option => (\n          <button type=\"button\" name={option} onClick={this.handleAddVote}>\n            {option[0].toUpperCase() +\n              option\n                .split('')\n                .splice(1, option.length - 1)\n                .join('')}\n          </button>\n        ))}\n      </>\n    );\n  }\n}\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n","import React, { Component } from 'react';\nimport Section from '../Section/Section';\nimport Statistics from '../Statistics/Statistics';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    };\n  }\n\n  onLeaveFeedback = value => {\n    this.setState(prevState => ({\n      [value]: prevState[value] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    return this.state.good + this.state.bad + this.state.neutral;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return (\n      (this.state.good /\n        (this.state.good + this.state.bad + this.state.neutral)) *\n      100\n    );\n  };\n\n  render() {\n    const { good, bad, neutral } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {bad > 0 || good > 0 || neutral > 0 ? (\n            <Statistics\n              good={good}\n              bad={bad}\n              neutral={neutral}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <p>No feedback</p>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}