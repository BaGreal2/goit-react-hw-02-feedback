{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","countTotalFeedback","props","good","bad","neutral","countPositiveFeedbackPercentage","this","Component","FeedbackOptions","handleAddGood","handleGood","handleAddBad","handleBad","handleAddNeutral","handleNeutral","type","onClick","Section","App","setState","prevState","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAGqBA,E,4MACnBC,mBAAqB,WACnB,OAAO,EAAKC,MAAMC,KAAO,EAAKD,MAAME,IAAM,EAAKF,MAAMG,S,EAGvDC,gCAAkC,WAChC,OACG,EAAKJ,MAAMC,MACT,EAAKD,MAAMC,KAAO,EAAKD,MAAME,IAAM,EAAKF,MAAMG,SACjD,K,uDAIM,IAAD,EACwBE,KAAKL,MAA5BC,EADD,EACCA,KAAMC,EADP,EACOA,IAAKC,EADZ,EACYA,QACnB,OACE,oCACE,oCAAUF,GACV,uCAAaE,GACb,mCAASD,GACRA,EAAM,GACL,iDAAuBG,KAAKD,kCAA5B,U,GArB8BE,aCAnBC,E,4MACnBC,cAAgB,WACd,EAAKR,MAAMS,c,EAGbC,aAAe,WACb,EAAKV,MAAMW,a,EAGbC,iBAAmB,WACjB,EAAKZ,MAAMa,iB,uDAIX,OACE,oCACE,4BAAQC,KAAK,SAASC,QAASV,KAAKG,eAApC,QAGA,4BAAQM,KAAK,SAASC,QAASV,KAAKO,kBAApC,WAGA,4BAAQE,KAAK,SAASC,QAASV,KAAKK,cAApC,Y,GAtBqCJ,aC8B9BU,MA5Bf,SAAiBhB,GAAQ,IACfC,EAA6DD,EAA7DC,KAAMC,EAAuDF,EAAvDE,IAAKC,EAAkDH,EAAlDG,QAASM,EAAyCT,EAAzCS,WAAYE,EAA6BX,EAA7BW,UAAWE,EAAkBb,EAAlBa,cACnD,OACE,oCACE,kBAAC,EAAD,CACEJ,WAAYA,EACZE,UAAWA,EACXE,cAAeA,IAGhBX,EAAM,GAAKD,EAAO,GAAKE,EAAU,EAChC,kBAAC,EAAD,CAAYF,KAAMA,EAAMC,IAAKA,EAAKC,QAASA,IAE3C,4CCfac,E,kDACnB,aAAe,IAAD,8BACZ,gBAQFR,WAAa,WACX,EAAKS,UAAS,SAAAC,GAAS,MAAK,CAC1BlB,KAAMkB,EAAUlB,KAAO,OAXb,EAedU,UAAY,WACV,EAAKO,UAAS,SAAAC,GAAS,MAAK,CAC1BjB,IAAKiB,EAAUjB,IAAM,OAjBX,EAqBdW,cAAgB,WACd,EAAKK,UAAS,SAAAC,GAAS,MAAK,CAC1BhB,QAASgB,EAAUhB,QAAU,OArB/B,EAAKiB,MAAQ,CACXnB,KAAM,EACNE,QAAS,EACTD,IAAK,GALK,E,qDA2BJ,IAAD,EACwBG,KAAKe,MAA5BnB,EADD,EACCA,KAAMC,EADP,EACOA,IAAKC,EADZ,EACYA,QACnB,OACE,oCACE,kBAAC,EAAD,CACEF,KAAMA,EACNC,IAAKA,EACLC,QAASA,EACTM,WAAYJ,KAAKI,WACjBE,UAAWN,KAAKM,UAChBE,cAAeR,KAAKQ,qB,GAtCGP,aCSlBe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.10efb94e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Statistics extends Component {\n  countTotalFeedback = () => {\n    return this.props.good + this.props.bad + this.props.neutral;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return (\n      (this.props.good /\n        (this.props.good + this.props.bad + this.props.neutral)) *\n      100\n    );\n  };\n\n  render() {\n    const { good, bad, neutral } = this.props;\n    return (\n      <>\n        <p>Good: {good}</p>\n        <p>Neutral: {neutral}</p>\n        <p>Bad: {bad}</p>\n        {bad > 0 && (\n          <p>Positive Feedback: {this.countPositiveFeedbackPercentage()}%</p>\n        )}\n      </>\n    );\n  }\n}\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class FeedbackOptions extends Component {\n  handleAddGood = () => {\n    this.props.handleGood();\n  };\n\n  handleAddBad = () => {\n    this.props.handleBad();\n  };\n\n  handleAddNeutral = () => {\n    this.props.handleNeutral();\n  };\n\n  render() {\n    return (\n      <>\n        <button type=\"button\" onClick={this.handleAddGood}>\n          Good\n        </button>\n        <button type=\"button\" onClick={this.handleAddNeutral}>\n          Neutral\n        </button>\n        <button type=\"button\" onClick={this.handleAddBad}>\n          Bad\n        </button>\n      </>\n    );\n  }\n}\n\nFeedbackOptions.propTypes = {\n  handleGood: PropTypes.func.isRequired,\n  handleBad: PropTypes.func.isRequired,\n  handleNeutral: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Statistics from '../Statistics/Statistics';\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\n\nfunction Section(props) {\n  const { good, bad, neutral, handleGood, handleBad, handleNeutral } = props;\n  return (\n    <>\n      <FeedbackOptions\n        handleGood={handleGood}\n        handleBad={handleBad}\n        handleNeutral={handleNeutral}\n      />\n\n      {bad > 0 || good > 0 || neutral > 0 ? (\n        <Statistics good={good} bad={bad} neutral={neutral} />\n      ) : (\n        <p>No feedback</p>\n      )}\n    </>\n  );\n}\n\nSection.propTypes = {\n  good: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  handleGood: PropTypes.func.isRequired,\n  handleBad: PropTypes.func.isRequired,\n  handleNeutral: PropTypes.func.isRequired,\n};\n\nexport default Section;\n","import React, { Component } from 'react';\nimport Section from './components/Section/Section';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0,\n    };\n  }\n\n  handleGood = () => {\n    this.setState(prevState => ({\n      good: prevState.good + 1,\n    }));\n  };\n\n  handleBad = () => {\n    this.setState(prevState => ({\n      bad: prevState.bad + 1,\n    }));\n  };\n\n  handleNeutral = () => {\n    this.setState(prevState => ({\n      neutral: prevState.neutral + 1,\n    }));\n  };\n\n  render() {\n    const { good, bad, neutral } = this.state;\n    return (\n      <>\n        <Section\n          good={good}\n          bad={bad}\n          neutral={neutral}\n          handleGood={this.handleGood}\n          handleBad={this.handleBad}\n          handleNeutral={this.handleNeutral}\n        />\n      </>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}